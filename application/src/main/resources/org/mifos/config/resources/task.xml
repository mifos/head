<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<import resource="classpath*:org/mifos/config/resources/propertyConfigurer.xml" />
	<!-- 
    <import resource="propertyConfigurer.xml"/>    
    -->
     
    <bean id="dbConfig" class="org.mifos.config.DatabaseConfiguration">
        <constructor-arg index="0" value="${${mifos.mode}.database.user}" />
        <constructor-arg index="1" value="${${mifos.mode}.database.password}" />
        <constructor-arg index="2" value="${${mifos.mode}.database}" />
        <constructor-arg index="3" value="${${mifos.mode}.database.host}" />
        <constructor-arg index="4" value="${${mifos.mode}.database.port}" />
        <constructor-arg index="5" value="${${mifos.mode}.database.dbPentahoDW}"/>
    </bean>
     
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        p:driverClass="${${mifos.mode}.database.driver}"
        p:jdbcUrl="jdbc:mysql://#{dbConfig.host}:#{dbConfig.port}/#{dbConfig.dbName}?${${mifos.mode}.database.params}"
        p:user="#{dbConfig.user}"
        p:password="#{dbConfig.password}"
        p:initialPoolSize="5"
        p:minPoolSize="${${mifos.mode}.database.hibernate.c3p0.min_size}"
        p:maxPoolSize="${${mifos.mode}.database.hibernate.c3p0.max_size}"
        p:checkoutTimeout="${${mifos.mode}.database.hibernate.c3p0.timeout}"      
        p:maxStatements="${${mifos.mode}.database.hibernate.c3p0.max_statements}"
        p:testConnectionOnCheckout="false"
        p:idleConnectionTestPeriod="${${mifos.mode}.database.hibernate.c3p0.idle_test_period}" destroy-method="close" />
	
	<bean id="dataSourcePentahoDW" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        p:driverClass="${${mifos.mode}.database.driver}"
        p:jdbcUrl="jdbc:mysql://#{dbConfig.host}:#{dbConfig.port}/#{dbConfig.dbPentahoDW}?${${mifos.mode}.database.params}"
        p:user="#{dbConfig.user}"
        p:password="#{dbConfig.password}"
        p:initialPoolSize="5"
        p:minPoolSize="${${mifos.mode}.database.hibernate.c3p0.min_size}"
        p:maxPoolSize="${${mifos.mode}.database.hibernate.c3p0.max_size}"
        p:checkoutTimeout="${${mifos.mode}.database.hibernate.c3p0.timeout}"      
        p:maxStatements="${${mifos.mode}.database.hibernate.c3p0.max_statements}"
        p:testConnectionOnCheckout="false"
        p:idleConnectionTestPeriod="${${mifos.mode}.database.hibernate.c3p0.idle_test_period}" destroy-method="close" />
<!--      p:checkoutTimeout="${${mifos.mode}.database.hibernate.c3p0.timeout}"   -->   
    <!--
        ========= Batch jobs configurations: =========
    -->

    <!--
                ProductStatus:
    -->
    <bean name="ProductStatus" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ProductStatus" />
      <property name="name" value="ProductStatusJob" />
    </bean>
    <bean id="productStatusTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="ProductStatusJob"/>
        <property name="jobDetail" ref="ProductStatus" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ProductStatusJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ProductStatus-step-1">
            <batch:tasklet ref="ProductStatusTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ProductStatusTasklet" class="org.mifos.framework.components.batchjobs.helpers.ProductStatusHelper" />

    <!--
                SavingsIntPostingTask:
    -->
    <bean name="SavingsIntPostingTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.SavingsIntPostingTask" />
      <property name="name" value="SavingsIntPostingTaskJob" />
    </bean>
    <bean id="savingsIntPostingTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="SavingsIntPostingTaskJob"/>
        <property name="jobDetail" ref="SavingsIntPostingTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="SavingsIntPostingTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="SavingsIntPostingTask-step-1">
            <batch:tasklet ref="SavingsIntPostingTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="SavingsIntPostingTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.SavingsIntPostingHelper" />

    <!--
                ApplyCustomerFeeChangesTask:
    -->
    <bean name="ApplyCustomerFeeChangesTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ApplyCustomerFeeChangesTask" />
      <property name="name" value="ApplyCustomerFeeChangesTaskJob" />
    </bean>
    <bean id="applyCustomerFeeChangesTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="ApplyCustomerFeeChangesTaskJob"/>
        <property name="jobDetail" ref="ApplyCustomerFeeChangesTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ApplyCustomerFeeChangesTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ApplyCustomerFeeChangesTask-step-1">
            <batch:tasklet ref="ApplyCustomerFeeChangesTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ApplyCustomerFeeChangesTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.ApplyCustomerFeeChangesHelper" />

    <!--
                LoanArrearsAgingTask:
    -->
    <bean name="LoanArrearsAgingTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.LoanArrearsAgingTask" />
      <property name="name" value="LoanArrearsAgingTaskJob" />
    </bean>
    <bean id="loanArrearsAgingTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="LoanArrearsAgingTaskJob"/>
        <property name="jobDetail" ref="LoanArrearsAgingTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="LoanArrearsAgingTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="LoanArrearsAgingTask-step-1">
            <batch:tasklet ref="LoanArrearsAgingTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="LoanArrearsAgingTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.LoanArrearsAgingHelper" />

    <!--
                ApplyHolidayChangesTask
    -->
    <bean name="ApplyHolidayChangesTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ApplyHolidayChangesTask" />
      <property name="name" value="ApplyHolidayChangesTaskJob" />
    </bean>
    <bean id="applyHolidayChangesTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="ApplyHolidayChangesTaskJob"/>
        <property name="jobDetail" ref="ApplyHolidayChangesTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ApplyHolidayChangesTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ApplyHolidayChangesTask-step-1">
            <batch:tasklet ref="ApplyHolidayChangesTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ApplyHolidayChangesTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.ApplyHolidayChangesHelper" />

    <!--
                LoanArrearsAndPortfolioAtRiskTask:
    -->
    <bean name="LoanArrearsAndPortfolioAtRiskTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.PortfolioAtRiskTask" />
      <property name="name" value="LoanArrearsAndPortfolioAtRiskTaskJob" />
    </bean>
    <bean id="loanArrearsAndPortfolioAtRiskTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="LoanArrearsAndPortfolioAtRiskTaskJob"/>
        <property name="jobDetail" ref="LoanArrearsAndPortfolioAtRiskTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="LoanArrearsAndPortfolioAtRiskTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="LoanArrearsAndPortfolioAtRiskTask-step-1" next="LoanArrearsAndPortfolioAtRiskTask-step-2">
            <batch:tasklet ref="LoanArrearsTaskTasklet" />
        </batch:step>
        <batch:step id="LoanArrearsAndPortfolioAtRiskTask-step-2">
            <batch:tasklet ref="PortfolioAtRiskTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="LoanArrearsTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.LoanArrearsHelper" />
    <bean name="PortfolioAtRiskTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.PortfolioAtRiskHelper" />
    
    <!-- 
                ApplyPenaltyToLoanAccountsTask:
    -->
    <bean name="ApplyPenaltyToLoanAccountsTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ApplyPenaltyToLoanAccountsTask"/>
        <property name="name" value="ApplyPenaltyToLoanAccountsTaskJob" />
    </bean>
    <bean id="applyPenaltyToLoanAccountsTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="ApplyPenaltyToLoanAccountsTaskJob"/>
        <property name="jobDetail" ref="ApplyPenaltyToLoanAccountsTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ApplyPenaltyToLoanAccountsTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ApplyPenaltyToLoanAccountsTask-step-1">
            <batch:tasklet ref="ApplyPenaltyToLoanAccountsTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ApplyPenaltyToLoanAccountsTasklet" class="org.mifos.framework.components.batchjobs.helpers.ApplyPenaltyToLoanAccountsHelper" />

    <!--
                GenerateMeetingsForCustomerAndSavingsTask:
    -->
    <bean name="GenerateMeetingsForCustomerAndSavingsTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.GenerateMeetingsForCustomerAndSavingsTask" />
      <property name="name" value="GenerateMeetingsForCustomerAndSavingsTaskJob" />
    </bean>
    <bean id="generateMeetingsForCustomerAndSavingsTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="GenerateMeetingsForCustomerAndSavingsTaskJob"/>
        <property name="jobDetail" ref="GenerateMeetingsForCustomerAndSavingsTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="GenerateMeetingsForCustomerAndSavingsTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="GenerateMeetingsForCustomerAndSavingsTask-step-1">
            <batch:tasklet ref="GenerateMeetingsForCustomerAndSavingsTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="GenerateMeetingsForCustomerAndSavingsTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.GenerateMeetingsForCustomerAndSavingsHelper" />

    <!--
                BranchReportTask:
    -->
    <bean name="BranchReportTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.BranchReportTask" />
      <property name="name" value="BranchReportTaskJob" />
    </bean>
    <bean id="branchReportTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="name" value="BranchReportTaskJob"/>
        <property name="jobDetail" ref="BranchReportTask" />
        <property name="cronExpression" value="0 5 0 * * ?" />
    </bean>
    <batch:job id="BranchReportTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="BranchReportTask-step-1">
            <batch:tasklet ref="BranchReportTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="BranchReportTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.BranchReportHelper" />

	<!--
                ETLReportDWTask:
    -->	
    <bean name="ETLReportDWTask" parent="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
      <property name="jobClass" value="org.mifos.framework.components.batchjobs.helpers.ETLReportDWTask" />
      <property name="name" value="ETLReportDWTaskJob" />
    </bean>
    <bean id="ETLReportDWTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="ETLReportDWTask" />
        <property name="cronExpression" value="0 0 0 * * ?" />
    </bean>
    <batch:job id="ETLReportDWTaskJob" parent="jobBase" job-repository="jobRepository">
        <batch:step id="ETLReportDWTask-step-1">
            <batch:tasklet ref="ETLReportDWTaskTasklet" />
        </batch:step>
    </batch:job>
    <bean name="ETLReportDWTaskTasklet" class="org.mifos.framework.components.batchjobs.helpers.ETLReportDWHelper" />

    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">MifosQuartzScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">1</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
            </props>
        </property>
        <property name="triggers">
            <list>
                <ref bean="productStatusTrigger" />
                <ref bean="savingsIntPostingTaskTrigger" />
                <ref bean="applyCustomerFeeChangesTaskTrigger" />
                <ref bean="loanArrearsAgingTaskTrigger" />
                <ref bean="applyHolidayChangesTaskTrigger" />
                <ref bean="loanArrearsAndPortfolioAtRiskTaskTrigger" />
                <ref bean="generateMeetingsForCustomerAndSavingsTaskTrigger" />
                <ref bean="branchReportTaskTrigger" />
                <ref bean="applyPenaltyToLoanAccountsTaskTrigger"/>
                <ref bean="ETLReportDWTaskTrigger"/> 
            </list>
        </property>
    </bean>

    <!--
        ========= Framework-specific configurations: =========
    -->

    <batch:job-repository
       id="jobRepository"
       transaction-manager="transactionManager"
       data-source="dataSource"
       table-prefix="BATCH_"
    />

    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
       <property name="jobRepository" ref="jobRepository" />
       <property name="taskExecutor">
           <bean class="org.springframework.core.task.SyncTaskExecutor" />
       </property>
    </bean>

    <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />

    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <property name="tablePrefix" value="BATCH_" />
    </bean>

    <bean id="jobRegistryBeanPostProcessor" class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>

    <bean id="jobDetailBase" class="org.springframework.scheduling.quartz.JobDetailBean">
       <property name="jobDataAsMap">
        <map>
            <entry key="jobLocator" value-ref="jobRegistry" />
            <entry key="jobLauncher" value-ref="jobLauncher" />
            <entry key="jobExplorer" value-ref="jobExplorer" />
            <entry key="jobRepository" value-ref="jobRepository" />
        </map>
    </property>

    </bean>

    <batch:job id="jobBase" abstract="true">
        <batch:listeners>
            <batch:listener ref="jobListener"/>
        </batch:listeners>
    </batch:job>

    <bean id="jobListener" class="org.mifos.framework.components.batchjobs.BatchJobListener" />

</beans>
