<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >


<hibernate-mapping>

    <class name="org.mifos.customers.personnel.business.PersonnelBO"
        table="personnel">
        <id name="personnelId" column="personnel_id" type="short"
            access="field">
            <generator class="native" />
        </id>
        <version name="versionNo" column="version_no" type="integer"
            unsaved-value="negative" />
        <many-to-one name="level" column="level_id"
            class="org.mifos.customers.personnel.business.PersonnelLevelEntity"
            unique="true" lazy="false" />
        <many-to-one name="office" column="office_id"
            class="org.mifos.customers.office.business.OfficeBO" unique="true"
            lazy="false" />
        <property name="preferredLocale" column="preferred_locale" type="short" not-null="true" access="field" />
        <property name="sitePreference" column="site_preference" type="short" access="field" />
        <one-to-one name="personnelDetails"
            class="org.mifos.customers.personnel.business.PersonnelDetailsEntity"
            cascade="all" lazy="false" />

        <property name="globalPersonnelNum"
            column="global_personnel_num" type="string" />
        <property name="displayName" column="display_name"
            type="string" />
        <many-to-one name="status" column="personnel_status"
            class="org.mifos.customers.personnel.business.PersonnelStatusEntity" lazy="false" />
        <property name="title" column="title" type="integer" />
        <property name="searchId" column="search_id" type="string" />
        <property name="maxChildCount" column="max_child_count"
            type="integer" />
        <property name="encryptedPassword" column="password"
            type="binary" access="field" />
        <property name="userName" column="login_name" unique="true"
            type="string" access="field" />
        <property name="emailId" column="email_id" type="string"
            access="field" />
        <property name="passwordChanged" column="password_changed"
            type="short" access="field" />
        <property name="createdBy" column="created_by" type="short" />
        <property name="createdDate" column="created_date" type="date"
            access="field" />
        <property name="updatedBy" column="updated_by" type="short" />
        <property name="updatedDate" column="updated_date" type="date" />
        <property name="lastLogin" column="last_login" type="date"
            access="field" />
        <property name="locked" column="locked" type="short"
            access="field" />
        <property name="noOfTries" column="no_of_tries" type="short"
            access="field" />
        <set name="personnelRoles" cascade="all,delete-orphan"
            inverse="true" lazy="false">
            <key column="personnel_id" />
            <one-to-many
                class="org.mifos.customers.personnel.business.PersonnelRoleEntity" />
        </set>
        <set name="customFields" cascade="all" inverse="true"
            table="personnel_custom_field">
            <key column="personnel_id" />
            <one-to-many
                class="org.mifos.customers.personnel.business.PersonnelCustomFieldEntity" />
        </set>
        <set name="personnelMovements" cascade="all" lazy="false"
            access="field">
            <key column="personnel_id" update="false" />
            <one-to-many
                class="org.mifos.customers.personnel.business.PersonnelMovementEntity" />
        </set>
        <set name="personnelNotes" cascade="all" inverse="true"
            table="personnel_notes" lazy="true" order-by="COMMENT_ID desc"
            access="field">
            <key column="personnel_id" />
            <many-to-many
                class="org.mifos.customers.personnel.business.PersonnelNotesEntity"
                column="comment_id" />
        </set>
    </class>
    <!-- This query obtains all the active loan officers under a particular office -->
    <query name="masterdata.activeloanofficers">
        <![CDATA[select new org.mifos.dto.domain.PersonnelDto(personnel.personnelId,personnel.displayName) from org.mifos.customers.personnel.business.PersonnelBO as personnel where ((personnel.personnelId=:userId and :userLevelId=:levelId) or (:userLevelId!=:levelId and personnel.level.id = :levelId)) and personnel.office.officeId =:officeId and personnel.status.id =:statusId order by personnel.displayName]]>
    </query>
    <query name="personnel.formedByLoanOfficers">
        <![CDATA[select new org.mifos.dto.domain.PersonnelDto(personnel.personnelId,personnel.displayName) from org.mifos.customers.personnel.business.PersonnelBO as personnel where personnel.level.id = :levelId and personnel.office.officeId =:officeId and personnel.status.id =:statusId]]>
    </query>
    <query name="getCountActivePersonnel">
        <![CDATA[select count(*)  from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.office.officeId =:OFFICE_ID and personnel.status.id =:STATUS_ID]]>
    </query>
    <query name="getCountByName">
        <![CDATA[select count(*)  from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.userName = :USER_NAME]]>
    </query>
    <query name="getPersonnelByName">
        <![CDATA[from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.userName = :USER_NAME]]>
    </query>
    <query name="getPersonnelByDisplayName">
        <![CDATA[from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.displayName = :DISPLAY_NAME]]>
    </query>
    <query name="getCountByGovernmentId">
        <![CDATA[select count(*)  from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.personnelDetails.governmentIdNumber = :GOVT_ID]]>
    </query>
    <query name="getCountByDobAndDisplayName">
        <![CDATA[select count(*)  from org.mifos.customers.personnel.business.PersonnelBO as personnel where  personnel.displayName = :DISPLAY_NAME and personnel.personnelDetails.dob =:DOB]]>
    </query>
    <query name="findPersonnelById">
        <![CDATA[from PersonnelBO as p where p.personnelId =:PERSONNEL_ID]]>
    </query>
    <query name="getPersonBySystemId">
        <![CDATA[from org.mifos.customers.personnel.business.PersonnelBO as personnel where personnel.globalPersonnelNum =:globalPersonnelNum]]>
    </query>
    <query name="search_Personnel">
        <![CDATA[select distinct personnel.office.officeId, personnel.office.officeName,personnel.personnelId,personnel.globalPersonnelNum,personnel.displayName
            from org.mifos.customers.personnel.business.PersonnelBO personnel
            where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID)
            and personnel.office.searchId like :SEARCH_ALL
            and (personnel.personnelDetails.name.firstName like :USER_NAME or personnel.personnelDetails.name.lastName like :USER_NAME
            or personnel.personnelDetails.name.secondLastName like :USER_NAME
            or
            (personnel.personnelDetails.name.firstName like :USER_NAME1 and personnel.personnelDetails.name.lastName like :USER_NAME2) )
             order by personnel.office.officeName, personnel.personnelDetails.name.lastName
             ]]>
    </query>
    <query name="count_search_Personnel">
        <![CDATA[select count(*)
            from org.mifos.customers.personnel.business.PersonnelBO personnel
            where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID)
            and personnel.office.searchId like :SEARCH_ALL
            and (personnel.personnelDetails.name.firstName like :USER_NAME or personnel.personnelDetails.name.lastName like :USER_NAME or

            (personnel.personnelDetails.name.firstName like :USER_NAME1 and personnel.personnelDetails.name.lastName like :USER_NAME2))
             ]]>
    </query>

    <query name="search_Personnel_first_and_last_name">
        <![CDATA[select distinct personnel.office.officeId, personnel.office.officeName,personnel.personnelId,personnel.globalPersonnelNum,personnel.displayName
            from org.mifos.customers.personnel.business.PersonnelBO personnel
            where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID)
            and personnel.office.searchId like :SEARCH_ALL
            and (personnel.personnelDetails.name.firstName like :USER_NAME1 and personnel.personnelDetails.name.lastName like :USER_NAME2 )
             order by personnel.office.officeName, personnel.personnelDetails.name.lastName
             ]]>
    </query>
    <query name="count_search_Personnel_first_and_last_name">
        <![CDATA[select count(*)
            from org.mifos.customers.personnel.business.PersonnelBO personnel
            where ( (:USERLEVEL_ID=:LOID and personnel.personnelId=:USERID) or :USERLEVEL_ID!=:LOID)
            and personnel.office.searchId like :SEARCH_ALL
            and (personnel.personnelDetails.name.firstName like :USER_NAME1 and personnel.personnelDetails.name.lastName like :USER_NAME2 )
             ]]>
    </query>

    <query name="get_active_loanofficers_under_office">
        <![CDATA[from  org.mifos.customers.personnel.business.PersonnelBO personnel
                               where personnel.level.id=:personnelLevelId and
                               personnel.office.officeId=:officeId and personnel.status.id=:ACTIVE
                            order by personnel.displayName]]>
    </query>
    <query name="personnel.getActiveBranchManagerUnderOffice">
        <![CDATA[from org.mifos.customers.personnel.business.PersonnelBO as personnel
                            where personnel.office.officeId =:officeId and personnel.status.id =:personnelStatusId]]>
    </query>

    <query name="personnel.getAllPersonnel">
        <![CDATA[from org.mifos.customers.personnel.business.PersonnelBO personnel]]>
    </query>
</hibernate-mapping>
