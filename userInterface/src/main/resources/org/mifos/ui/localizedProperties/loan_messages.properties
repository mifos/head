# customer search screen (used in both loan and savings)
customerSearch.pageSubtitle=Select a customer
customerSearch.searchTerm=Name
customerSearch.instructions=Enter a Client or Group or Center name and click Search. Click Cancel to return to Clients &amp; Accounts without submitting information.
selectCustomer.instructions=To select, click on a resulting Client or Group from the list below. Click Cancel to return to Clients & Accounts without submitting information.

createLoanAccount.customerSearch.pageSubtitle=Select a Client or Group
createLoanAccount.customerSearch.instructions=Enter a Client or Group name and click Search. Click Cancel to return to Clients &amp; Accounts without submitting information.

# customer search validation
NotEmpty.CustomerSearchFormBean.searchString=Please specify Name to be searched.

# loan creation wizard steps
createLoanAccount.flowState.selectCustomer=Select Client/Group
createLoanAccount.flowState.enterAccountInfo=Enter Loan Account Information
createLoanAccount.flowState.reviewInstallments=Review installments
createLoanAccount.flowState.reviewAndSubmit=Preview &amp; submit

createLoanAccount.wizard.title=Create Loan Account
createLoanAccount.selectProduct.pageSubtitle=Enter Loan Account Information
createLoanAccount.selectProduct.instructions=Select a Loan instance. Then click Continue. Click Cancel to return to Clients &amp; Accounts without submitting information.
createLoanAccount.reviewInstallments.pageSubtitle=Review installments
createLoanAccount.reviewInstallments.instructions=Review the payment schedule below. Click Preview to continue. Click Cancel to return to Clients & Accounts without submitting information.
createLoanAccount.preview.pageSubtitle=Preview Loan account information
createLoanAccount.preview.instructions=Review the information below. Click Submit if you are satisfied or click Edit to make changes. Click Cancel to return to Clients & Accounts without submitting information.

redoLoanAccount.wizard.highlightedNote=Note: You are redoing a loan account.
redoLoanAccount.wizard.title=Redo Loan Account

selectProduct.accountOwnerName=Account Owner:
selectProduct.selectProductLabel=Loan product name:

# validation
NotNull.SelectProductFormBean.productId=Please select a Loan product name.

createLoanAccount.enterAccountInfo.productSummary.header=Loan Product Summary
createLoanAccount.enterAccountInfo.accountDetail.glim.individualdetails.header=Individual Details
createLoanAccount.enterAccountInfo.accountDetail.header=Loan Account Details
createLoanAccount.enterAccountInfo.defaultfees.header=Administrative Set Fees
createLoanAccount.enterAccountInfo.defaultpenalties.header=Administrative Set Penalties
createLoanAccount.enterAccountInfo.additionalfees.header=Apply Additional Fees

productSummary.description=Description:
productSummary.interestRateType=Interest rate type:
productSummary.freqOfInstallments=Frequency of installments:
productSummary.gracePeriodtype=Grace period type:
productSummary.gracePeriod.none=None
productSummary.gracePeriod.allrepayments=Grace on all repayments
productSummary.gracePeriod.principalonly=Principal only
# variable installments
productSummary.variableInstallmentsAllowed=Can configure variable installments:
productSummary.fixedRepaymentSchedule=Fixed repayment schedule:
productSummary.variabeInstallments.minGap=Minimum gap between installments:
productSummary.variabeInstallments.maxGap=Maximum gap between installments:
productSummary.variabeInstallments.minInstallmentAmount=Minimum installment amount:
productSummary.variabeInstallments.minInstallmentAmount.notapplicable=N/A
productSummary.variabeInstallments.days=days
loanAccountFormBean.additionalfees.variableinstallments.invalid={0} fee cannot be applied to loan with variable installments.
loanAccountFormBean.defaultfees.variableinstallments.invalid={0} fee cannot be applied to loan with variable installments.

# loan form (create/edit)
createLoanAccount.amount=Amount:
createLoanAccount.allowedAmount=Allowed amount:
createLoanAccount.interestRate=Interest rate:
createLoanAccount.allowedInterestRate=Allowed interest rate:
createLoanAccount.numberOfInstallments=Number of installments:
createLoanAccount.allowedNumberOfInstallments=Allowed number of installments:
createLoanAccount.disbursalDate=Disbursal date:
createLoanAccount.repaymentDay=Repayment day:
createLoanAccount.graceDuration=Grace period for repayments:
createLoanAccount.allowedGraceInInstallments=Installments
createLoanAccount.sourceOfFund=Source of funds:
createLoanAccount.purposeOfLoan=Purpose of loan:
createLoanAccount.collateralType=Collateral type:
createLoanAccount.collateralNotes=Collateral notes:
createLoanAccount.externalId=External id:
createLoanAccount.feeType=Fee type:
createLoanAccount.feeAmount=Amount:
createLoanAccount.periodicity=Periodicity:
createLoanAccount.frequency=Frequency:
createLoanAccount.formula=Formula: %
createLoanAccount.weeks=week(s)
createLoanAccount.months=month(s)
createLoanAccount.periodicity.onetime=One Time
createLoanAccount.frequency.timeofdisbursement=Time of Disbursement
createLoanAccount.frequency.timeoffirstloanrepayment=Time of First Loan Repayment
createLoanAccount.frequency.upfront=Upfront

#loan validation codes
loanAccountFormBean.Amount.invalid=Please specify valid Amount. Amount should be a value between {0} and {1}, inclusive.
loanAccountFormBean.InterestRate.invalid=Please specify valid Interest rate. Interest rate should be a value between {0} and {1}, inclusive.
loanAccountFormBean.NumberOfInstallments.invalid=Please specify valid No. of installments. No. of installments should be a value between {0} and {1}, inclusive.

loanAccountFormBean.DisbursalDate.invalid=You have entered an invalid disbursal date. Please check the date format.
loanAccountFormBean.DisbursalDate.dd.invalid=You have entered an invalid disbursal date. Please check your input for days.
loanAccountFormBean.DisbursalDate.mm.invalid=You have entered an invalid disbursal date. Please check your input for months.
loanAccountFormBean.DisbursalDate.yyyy.invalid=You have entered an invalid disbursal date. Please check your input for years.
dibursementdate.invalid.in.relation.to.meeting.schedule=The disbursement date is invalid. It must fall on a valid customer meeting schedule.
dibursementdate.falls.on.holiday=The disbursement date is invalid. Disbursement date must not be during a defined holiday.
dibursementdate.before.customer.activation.date=The disbursement date is invalid. It cannot be before the customers activation date {0}.
dibursementdate.before.product.startDate=The disbursement date is invalid. It cannot be before the product start date {0}.
dibursementdate.cannot.be.before.todays.date=The disbursement date is invalid. Disbursement date must be on or after today's date.
import.loan.account.disbursal.date=Date of transaction can not be a future date.
# specifically related to creating loans with backdated payments (redo)
dibursementdate.before.todays.date=The disbursement date is invalid. Disbursement date must be less than today's date.
#
paymentDate.before.disbursementDate.invalid=The payment date for installment {0} is invalid. The payment date should be on or after the loans disbursement date.
paymentDate.before.lastPaymentDate.invalid=Installment number {0} has invalid payment date. Installment payment dates should be in ascending order.
paymentDate.is.future.date.invalid=Installment number {0} has invalid payment date. You may only enter amounts with payment dates in the past when redoing a loan.
totalPayments.exceeded.invalid=Please specify valid Amount. The amount specified should be less than the amount required for complete payment.
loanAccountFormBean.SourceOfFunds.invalid=Please specify source of funds.
loanAccountFormBean.PurposeOfLoan.invalid=Please specify loan purpose.
loanAccountFormBean.externalid.invalid=Please specify required external id.
loanAccountFormBean.glim.clientAmount.invalid=Please specify valid amount for member {0}. The total amount for all members should be a value between {1} and {2}, inclusive.
loanAccountFormBean.glim.purposeOfLoan.invalid=Please specify loan purpose for member {0}.
loanAccountFormBean.glim.client.notselected=You have entered details for member {0} which you have not selected. Select the checkbox in front of the member's name in order to include him or her in the loan.
loanAccountFormBean.glim.notEnoughClients=You must select at least two individual members in the &quot;Individual Details&quot; section in order to successfully create a loan.
loanAccountFormBean.glim.totalAmount.invalid=The sum of the amounts specified for each member is outside the allowable total amount for this loan product. Enter individual amounts so that the total amount is between {0} and {1}.
loanAccountFormBean.repaymentDay.monthly.weekOfMonth.invalid=Please select a week of the month for repayment day.
loanAccountFormBean.repaymentDay.monthly.dayOfWeek.invalid=Please select a day of the week for repayment day.
loanAccountFormBean.repaymentDay.weekly.dayOfWeek.invalid=Please select a day of the week for repayment day.
loanAccountFormBean.repaymentDay.recursEvery.invalid=Please specify a valid recurring frequency for repayment day.
loanAccountFormBean.repaymentDay.monthly.dayOfMonth.invalid=Please select a day of the month for repayment day.
loanAccountFormBean.gracePeriodDuration.emptyOrIncorrect.invalid=Please specify valid {0} for repayments. {0} should be a value less than {1}.
loanAccountFormBean.gracePeriodDuration.invalid=The Grace period cannot be greater than in loan product definition.
loanAccountFormBean.gracePeriodDurationInRelationToInstallments.invalid=Grace period for repayments must be less than number of loan installments.
loanAccountFormBean.additionalfee.invalid=Please specify valid fee amount. Only positive numbers or decimal separator are allowed.
loanAccountFormBean.digitsAfterDecimalForInterest.invalid=The interest rate is invalid as the number of digits after the decimal separator exceeds the allowed number of {0}.
loanAccountFormBean.digitsBeforeDecimalForInterest.invalid=The interest rate is invalid as the number of digits before the decimal separator exceeds the allowed number of {0}.
loanAccountFormBean.amount.digitsAfterDecimal.invalid=The amount is invalid because the number of digits after the decimal separator exceeds the allowed number of {0}.
loanAccountFormBean.amount.digitsBeforeDecimal.invalid=The amount is invalid because the number of digits before the decimal separator exceeds the allowed number of {0}.
loanAccountFormBean.client.amount.digitsAfterDecimal.invalid=The amount for client {0} is invalid because the number of digits after the decimal separator exceeds the allowed number of {1}.
loanAccountFormBean.client.amount.digitsBeforeDecimal.invalid=The amount for client {0} is invalid because the number of digits before the decimal separator exceeds the allowed number of {1}.
createLoanAccount.glim.invalid.less.than.two.active.clients.in.group=Group loan is not allowed as there must be at least two active clients within the group when Group loan with individual monitoring (GLIM) is enabled.
createLoanAccount.glim.and.new.glim.are.enabled=New Group Loan option is enabled in configuration file and also GLIM option is enabled in the database. Loan for Group will be created using new Group Loan approach. Please turn off GLIM option in database. If you want to create Loan for Group using old approach, then please disable AccountingRules.GroupLoanWithMembers option in configuration file and restart Mifos.
loanAccountFormBean.additionalfees.amountOrRate.digits.after.decimal.invalid=The specified amount for additional fee {0} is invalid because the number of digits after the decimal separator exceeds the allowed number of {1}.
loanAccountFormBean.additionalfees.amountOrRate.digits.before.decimal.invalid=The specified amount for additional fee {0} is invalid because the number of digits before the decimal separator exceeds the allowed number of {1}.
loanAccountFormBean.defaultfees.amountOrRate.digits.after.decimal.invalid=The specified amount for administrative fee {0} is invalid because the number of digits after the decimal separator exceeds the allowed number of {1}.
loanAccountFormBean.defaultfees.amountOrRate.digits.before.decimal.invalid=The specified amount for administrative fee {0} is invalid because the number of digits before the decimal separator exceeds the allowed number of {1}.

# loan review installments
reviewInstallments.mode_of_payment=Mode of payment:
reviewInstallments.modeOfPaymentHeading=Mode of payment
reviewInstallments.heading=Installments
reviewInstallments.loanAmount=Loan amount:
reviewInstallments.disbursmentDate=Disbursement date:
reviewInstallments.tableHeading=Amount due
reviewInstallments.installmentHeading=Installment No.
reviewInstallments.dueDateHeading=Due date
reviewInstallments.actualPaymentDateHeading=Actual payment date
reviewInstallments.principalHeading=Principal
reviewInstallments.interestHeading=Interest
reviewInstallments.feesHeading=Fees
reviewInstallments.totalHeading=Total
reviewInstallments.actualAmountPaid=Amount Paid

reviewInstallments.redo.datePaidHeading=Date Paid
reviewInstallments.redo.paidInstallmentsHeading=Installments Paid
reviewInstallments.redo.futureInstallmentsHeading=Future Installments
reviewInstallments.redo.runningBalanceHeading=Running Balance
reviewInstallments.redo.principalHeading=Principal
reviewInstallments.redo.interestHeading=Interest
reviewInstallments.redo.feesHeading=Fees
reviewInstallments.redo.totalInstallmentHeading=Total

#validation
installment.total.amount.blank.and.invalid=The total amount field for installment {0} was blank and has been defaulted to zero.
installment.amount.paid.blank.and.invalid=The amount paid field for installment {0} was blank and has been defaulted to zero.
installment.duedate.blank.and.invalid=The due date field for installment {0} is blank.
installment.actualpaymentdate.blank.and.invalid=The actual payment date field for installment {0} is blank.


# preview loan account information
createLoanAccount.preview.loanHeading=Loan account information
createLoanAccount.preview.instanceHeading=Instance information
createLoanAccount.preview.chargesAppliedHeading=Charges Applied

# glim specific for preview page
createLoanAccount.preview.glim.clientIdHeading=Client ID
createLoanAccount.preview.glim.clientNameHeading=Client Name
createLoanAccount.preview.glim.governmentIdHeading=Government ID
createLoanAccount.preview.glim.loanAmountHeading=Loan Amount
createLoanAccount.preview.glim.loanPurposeHeading=Loan Purpose

# loan confirmation
createLoanAccount.accountCreated.pleasenote=Please Note:
createLoanAccount.accountCreated.accountDetails=A new loan account for {0} has been assigned account #
createLoanAccount.accountCreated.searchInstruction=You can enter an account number into the search box to access account details.
createLoanAccount.accountCreated.successMessage=You have successfully created a new loan account
createLoanAccount.accountCreated.nextSteps=Suggested next steps
createLoanAccount.accountCreated.action.viewSavingsAccount=View loan account details now
createLoanAccount.accountCreated.action.openNewSavingsAccount=Open new savings account
createLoanAccount.accountCreated.action.openNewLoanAccount=Open new loan account

# general form messages
requiredFieldsInstructions=Fields marked with an asterisk are required.
selectPrompt=--Select--
datefield.dd=DD
datefield.mm=MM
datefield.yyyy=YYYY

#Loan payment receipts
printReceipt.contentMessage=You have successfully applied payment. Now you can print receipt for this payment.
printReceipt.returnToLoanAccount=Return To Loan Account Details
